// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © FxCloudTrader

//@version=5
indicator(title="Flip Flop", shorttitle="Flip Flop", overlay=true, precision = 0)
lookbackInput = input.int(10, "Lookback in bars", minval = 1, maxval = 4999)
display_low_of_highest_bull_bar = input(true,"display_low_of_highest_bull_bar")

isBullish(i) =>
    close[i] > open[i]

isBearish(i) =>
    close[i] < open[i]

candle_highs = array.new_float(lookbackInput)
candle_lows = array.new_float(lookbackInput)
candle_bull_bar_highs = array.new_float(lookbackInput)
candle_bull_bar_lows = array.new_float(lookbackInput)

var int index_highest_bull_count_from_left = na
var int index_highest_bull = na
var float value_highest_bull = na
var float value_low_of_highest_bull = na

if barstate.islast
    //@variable A string containing the size of `a` and the current `bar_index` value.
    string labelText = "Array size: " + str.tostring(candle_highs.size()) + "\nbar_index: " + str.tostring(bar_index)

    var int offset_position = 0
    var int offset_lookback = 1

    for i = lookbackInput-1 to 0 by 1
        // To put consecutive highs and lows into their perspective arrays 
        array.set(candle_highs, i-offset_position, high[i])
        array.set(candle_lows, i-offset_position, low[i])
        // if i == 0

        if isBullish(i) 
            // To put consecutive bullish highs and lows into their perspective arrays 
            array.set(candle_bull_bar_highs, i-offset_position, high[i])
            array.set(candle_bull_bar_lows, i-offset_position, low[i])
            
            // To set the first high from the first bull bar from the beginning of the array or series
            if na(value_highest_bull)
                array.set(candle_bull_bar_highs, i-offset_position, high[i])
                value_highest_bull := high[i]
                index_highest_bull := i

            // Once a new high is set, populate it to the next element in the array, until a new high occurs. 
            if array.get(candle_highs, i-offset_position) > array.max(candle_bull_bar_highs)
                array.set(candle_bull_bar_highs, i-offset_position, high[i])
                value_highest_bull := high[i]    
                index_highest_bull := i
            

            // if na(value_highest_bull)
            //     value_highest_bull := array.get(candle_highs, i-offset_position)
            //     index_highest_bull_count_from_left := i - offset_position
            // else if array.get(candle_highs, i-offset_position) > value_highest_bull
            //     value_highest_bull := array.get(candle_highs, i-offset_position)
            //     index_highest_bull_count_from_left := i - offset_position

            // value_low_of_highest_bull := low[index_highest_bull_count_from_left]


        // If current value is smaller than the max value in the array, or the current bar is a bear bar, fill the current value with the max value.
        if array.get(candle_highs, i-offset_position) < array.max(candle_bull_bar_highs) or isBearish(i-offset_position)
            array.set(candle_bull_bar_highs, i-offset_position, array.max(candle_bull_bar_highs))
            // Note: index_highest_bull does not need to be set here since the index of the max value should be retained from above if statement.

        // display labels for testing
        label lbl_array  = label.new(bar_index, 0, labelText, size = size.normal, style = label.style_label_up)
        label.set_xy(lbl_array, bar_index - i, high)
        label.set_yloc(lbl_array, yloc = yloc.belowbar)
        labelText := "Array: " + str.tostring(candle_highs.size()) + "\nindex: " + str.tostring(index_highest_bull) + "\nhigh:" + str.tostring(array.get(candle_bull_bar_highs,index_highest_bull)) + "\nmax:" + str.tostring(array.max(candle_bull_bar_highs))
        label.set_text(lbl_array, labelText)

        // // labels for subsequent closes below the low of the highest bull bar
        // if close[i] < value_low_of_highest_bull and index_highest_bull_count_from_left > i
        //     label.new(bar_index-i+1, high[i], yloc = yloc.abovebar)


    // // display labels for testing
    // label lbl_array  = label.new(bar_index, 0, labelText, size = size.normal, style = label.style_label_up)
    // label.set_xy(lbl_array, bar_index, high)
    // label.set_yloc(lbl_array, yloc = yloc.belowbar)
    // labelText := "Array: " + str.tostring(candle_highs.size()) + "\nindex: " + str.tostring(index_highest_bull) + "\nhigh:" + str.tostring(array.get(candle_bull_bar_highs,index_highest_bull)) + "\nmax:" + str.tostring(array.max(candle_bull_bar_highs))
    // label.set_text(lbl_array, labelText)

    // // labels for the low of the highest bull bar
    // if isBullish(index_highest_bull_count_from_left) 
    //     label lbl_array = label.new(bar_index-index_highest_bull_count_from_left, high[index_highest_bull_count_from_left], str.tostring(index_highest_bull_count_from_left) + "\n" +str.tostring(array.get(candle_lows,index_highest_bull_count_from_left-1)) , size = size.auto, style = label.style_label_up)
    //     label.set_xy(lbl_array, bar_index-index_highest_bull_count_from_left, low[index_highest_bull_count_from_left])
    //     label.set_yloc(lbl_array, yloc.belowbar)


//----------------------------------------------------------------------------
// Method for Ploting the low of the highest bullish bar from the array
high_of_highest_bullish_bar = array.max(candle_bull_bar_highs)
int index_low_of_highest_bull = array.indexof(candle_bull_bar_highs,high_of_highest_bullish_bar)
low_of_highest_bullish_bar = array.max(candle_bull_bar_lows)
// Plot the highest bullish bar
// plot(display_low_of_highest_bull_bar?low_of_highest_bullish_bar[index_highest_bull]:na, "The Low of The Highest Bullish Bar", color=color.green)
    
// End of Method
//----------------------------------------------------------------------------
// // testing labels
// label1 = label.new(bar_index, low, text=":"+str.tostring(value_low_of_highest_bull), style=label.style_none, textcolor = color.yellow)
// label.set_xloc(label1, time, xloc.bar_time)
// label.set_yloc(label1, yloc = yloc.belowbar)
// label.set_color(label1, color.yellow)
// label.set_size(label1, size.normal)



// // Method 2
// // Function to check if the bar is bullish

// // Define the array to store bullish bars' highs
// var float[] bullishBarsHighs = array.new_float(0)

// // Length of the array (number of bars to store)
// arrayLength = input(10, "Number of Bullish Bars to Store")

// // Main script logic
// if isBullish(0)
//     // Add the high of the current bullish bar to the array
//     array.push(bullishBarsHighs, high)
//     // Keep the array size to the defined length
//     if array.size(bullishBarsHighs) > arrayLength
//         array.shift(bullishBarsHighs)

// // Find the highest bullish bar from the array
// maxhighestBullishBar = array.max(bullishBarsHighs)

// // Plot the highest bullish bar
// plot(maxhighestBullishBar, "Highest Bullish Bar", color=color.green)

// // Debugging: Uncomment the line below to see the array contents on the chart
// // plotchar(array.get(bullishBarsHighs, 0), "Last Bullish Bar High", location=location.top)

// // End of Method 2



// Method 3

// // Function to check if the bar is bullish
// isBullish() =>
//     close > open

// // Define the arrays to store bullish bars' highs and lows
// var float[] bullishBarsHighs = array.new_float(0)
// var float[] bullishBarsLows = array.new_float(0)

// // Length of the array (number of bars to store)
// arrayLength = input(10, "Number of Bullish Bars to Store")

// // Main script logic
// if isBullish()
//     // Add the high and low of the current bullish bar to the arrays
//     array.push(bullishBarsHighs, high)
//     array.push(bullishBarsLows, low)
//     // Keep the array size to the defined length
//     if array.size(bullishBarsHighs) > arrayLength
//         array.shift(bullishBarsHighs)
//         array.shift(bullishBarsLows)

// // Find the index of the highest bullish bar
// indexHighestBullishBar = array.indexof(bullishBarsHighs, array.max(bullishBarsHighs))

// // Retrieve the low of the highest bullish bar
// lowOfHighestBullishBar = array.get(bullishBarsLows, indexHighestBullishBar)

// // Plot the low of the highest bullish bar
// plot(indexHighestBullishBar, "Low of Highest Bullish Bar", color=color.yellow)

// // Debugging: Uncomment the line below to see the array contents on the chart
// // plotchar(array.get(bullishBarsLows, 0), "Last Bullish Bar Low", location=location.bottom)


// End of Method 3

